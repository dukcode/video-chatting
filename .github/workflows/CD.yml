name: CD

on:
  push:
    branches: [ "develop"]

env:
  IMG_NAME: "video-chatting"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test


      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          docker buildx build --push --platform linux/arm64 -t ${{ vars.DOCKER_USERNAME }}/${IMG_NAME}:${BUILD_NUMBER} -t ${{ vars.DOCKER_USERNAME }}/${IMG_NAME}:latest .

      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          BUILD_NUMBER: ${{ github.run_number }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKER_USERNAME,IMG_NAME,BUILD_NUMBER
          script: |
            echo "Docker Username: ${DOCKER_USERNAME}"
            echo "Image Name: ${IMG_NAME}"
            echo "Build Number: ${BUILD_NUMBER}"
            
            docker pull ${DOCKER_USERNAME}/${IMG_NAME}:${BUILD_NUMBER}
            CONTAINER_ID=$(docker ps -q --filter "name=${IMG_NAME}")
            
            if [ -n "$CONTAINER_ID" ]; then
              docker rm -f $CONTAINER_ID
            else
              echo "지정된 이름으로 실행 중인 컨테이너가 없습니다."
            fi
            
            docker run -d --name ${IMG_NAME} --log-driver=syslog -p 8080:8080 ${DOCKER_USERNAME}/${IMG_NAME}:${BUILD_NUMBER}
            
            docker image prune -a -f
